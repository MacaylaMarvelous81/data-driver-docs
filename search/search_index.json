{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Driver Documentation","text":"<p>Welcome to the Data Driver Documentation! Take a look around by searching, using the navbar, or looking at the Useful Links below.</p>"},{"location":"#useful-links","title":"Useful Links","text":"<ul> <li>Data Driver mod.io Page</li> <li>Data Driver Repository</li> <li>Data Driver Documentation Repository</li> <li>Synchrony Modding Documentation</li> <li>Introduction to Data Driver</li> </ul>"},{"location":"intro/intro/","title":"Introduction to Data Driver Docs","text":""},{"location":"intro/intro/#what-is-data-driver","title":"What is Data Driver?","text":"<p>Data Driver is a library mod for Crypt of the Necrodancer: Synchrony which lets mod creators make items through data files. Only JSON files and item entities are supported currently, but more file types and entities are in the works.</p>"},{"location":"intro/intro/#adding-a-dependency","title":"Adding a Dependency","text":"<p>Note</p> <p>This guide will not go over how to create Synchrony mods, but only on how to use Data Driver. To learn about Synchrony modding, look at the Synchrony Modding Documentation.</p> <p>Before using Data Driver in your mod, you should first mark it as a dependency in your <code>mod.json</code> file in the <code>dependencies</code> section. Your mod file should look similar to this: mod.json<pre><code>{\n\"namespace\": \"ExampleMod\",\n\"displayName\": \"Example Mod\",\n\"version\": \"1.0.0\",\n\"synchronyVersion\": \"3.7.1\",\n\"description\": \"No description given.\",\n\"author\": \"MacaylaMarvelous81\",\n\"dependencies\": {\n\"DataDriver\": \"1.0.0\" // (1)!\n},\n\"api\": {\"scriptPath\":\"\"},\n\"icon\": \"ExampleModIcon.png\",\n\"banner\": \"ExampleModBanner.png\",\n\"tags\": [],\n\"name\": \"ExampleMod\"\n}\n</code></pre></p> <ol> <li>The value is the version of Data Driver your mod is dependent on. Be sure to    check that you're specifying the same version of the mod that you're using.</li> </ol> <p>Now you're ready to start using Data Driver!</p>"},{"location":"intro/intro/#defining-an-item","title":"Defining an Item","text":"<p>To make an item, create a new JSON file in the <code>data/items</code> directory of your mod. This file will represent the definition of your item. Item definitions are made up of a few fields:</p> <ul> <li>name: The item's unique identifier.</li> <li>hint: The item's hint, which describes the item and appears above the item.</li> <li>slot: The slot the item should take.</li> <li>components: The components which make up the item.</li> </ul> Example <p>The item definition for a helmet item might look like this:</p> Item DefinitionLua Equivalent cosmic_helm.json<pre><code>{\n\"name\": \"CosmicHelm\",\n\"hint\": \"Cosmetic item\",\n\"slot\": \"head\",\n\"components\": {\n\"friendlyName\": {\n\"name\": \"Cosmic Helm\"\n},\n\"sprite\": {\n\"texture\": \"mods/ExampleMod/sprites/cosmic_helm.png\"\n}\n}\n}\n</code></pre> cosmic_helm.lua<pre><code>local customEntities = require \"necro.game.data.CustomEntities\"\ncustomEntities.extend({\nname = \"ExampleModCosmicHelm\",\ntemplate = customEntities.template.item(),\ndata = {\nhint = \"Cosmetic item\",\nslot = \"head\"\n},\ncomponents = {\nfriendlyName = {\nname = \"Cosmic Helm\"\n},\nsprite = {\ntexture = \"mods/ExampleMod/sprites/cosmic_helm.png\"\n}\n}\n})\n</code></pre> <p>Gotcha!</p> <p>Since Data Driver is the mod which creates the item, Crypt of the Necrodancer will use its namespace instead of the namespace of your mod. Furthermore, Data Driver will prefix the name of the item with your mod's folder name to keep the item names unique across mods. This may result in the item's name being different from what you may expect.</p> <p>Example</p> <p>If a mod located in the folder \"ExampleMod\" creates an item with the name \"CosmicHelm\", the full name will end up being \"DataDriver_ExampleModCosmicHelm\".</p> <p>Now the item will be registered whenever Data Driver is loaded, so you can use it in your mod!</p>"}]}